#!/bin/bash
set -e

nvim-bin ()
{
    local nvim=$(which nvim)
    echo "${nvim:-"$HOME/.local/bin/nvim"}"
}

update-nvim ()
{
    echo 'Downloading latest appimage'

    local wget=$(which wget)
    local grep=$(which grep)
    local sed=$(which sed)
    local head=$(which head)

    echo "Fetching appimage download url"
    local appimage_url=$(
        $wget -q -O- https://api.github.com/repos/neovim/neovim/releases/latest \
            | $grep 'browser_download_url.*.appimage' \
            | $head -n 1 \
            | $sed -e 's/^.*\(http.*appimage\).*$/\1/'
    )

    if [[ -n $appimage_url ]]; then
        local mkdir=$(which mkdir)
        local chmod=$(which chmod)

        local bin_path="$HOME/.local/bin"
        local nvim_path="$bin_path/nvim"

        $mkdir -p "$bin_path" &&\
            $wget -q --progress=bar --show-progress "$appimage_url" -O "$nvim_path" &&\
            $chmod u+x "$nvim_path"
    else
        echo 'AppImage download url not found'
    fi
}

sync-nvim-plugins ()
{
    echo 'Synchronizing plugins'

    download-plugin-manager
    sync-plugins
    sync-treesitter-parsers
}

download-plugin-manager ()
{
    local git=$(which git)
    local mkdir=$(which mkdir)
    local plugin_manager_url='https://github.com/wbthomason/packer.nvim'
    local nvim_plugin_dir="$HOME/.local/share/nvim/site/pack/packer/start"
    local plugin_manager="$nvim_plugin_dir/packer.nvim"

    [[ -d "$plugin_manager" ]] && return

    $mkdir -p "$nvim_plugin_dir" && $git clone --depth 1 "$plugin_manager_url" "$plugin_manager"
}


sync-plugins ()
{
    local plugins="$HOME/.config/nvim/lua/plugins/packer.lua"
    [[ -f $plugins ]] || return

    local nvim=$(nvim-bin)
    local quit_after_sync='autocmd User PackerComplete quitall'
    local sync_cmd='PackerSync'

    $nvim -u "$plugins" -c "$quit_after_sync" -c "$sync_cmd" SYNC
}


sync-treesitter-parsers ()
{
    local treesitter="$HOME/.config/nvim/lua/plugins/nvim-treesitter.lua"
    [[ -f $treesitter ]] || return

    local nvim=$(nvim-bin)
    local parsers=(bash c dockerfile lua make markdown python rust sql toml vim)
    local install_parsers="TSInstall! ${parsers[@]}"
    local quit_after_sync="sleep ${#parsers[@]} | quitall"
    $nvim --headless -c "$install_parsers" -c "$quit_after_sync"
}


update-python-requirements ()
{
    local python_cmd="$HOME/.local/share/nvim/python/bin/python"
    local requirements="$HOME/.config/nvim/requirements.txt"
    if [[ -f "$python_cmd" && -f "$requirements" ]]; then
        echo 'Updating python requirements'
        $python_cmd -mpip install -U setuptools pip wheel
        $python_cmd -mpip install -U -r "$requirements"
    else
        echo "Python requirements not updated"
    fi
}

require-update-nvim ()
{
    # Check if update is required.
    local update=false

    while getopts :u flag; do
        case "${flag}" in
            u) update=true;;
        esac
    done

    echo "$update"
}

main ()
{
    [[ $(which wget) ]] || return 0;

    if [[ "$(require-update-nvim $@)" == true ]]; then
        update-nvim
        echo
    fi
    sync-nvim-plugins
    echo
    update-python-requirements
    echo
}

main $@
