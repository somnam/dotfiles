#!/usr/bin/env bash
set -e

upgrade-fzf()
{
    download-fzf
    setup-fzf
}

download-fzf ()
{
    [[ $(which git) ]] || (echo "git not installed" && exit 1)
    local FZF_VERSION='v0.61.3'
    echo "Downloading fzf version ${FZF_VERSION}"

    local fzf_url="https://github.com/junegunn/fzf.git"
    local fzf_dir="$HOME/.fzf"
    local fzf_git_dir="$fzf_dir/.git"

    if [[ ! -d "$fzf_dir" ]]; then
        mkdir -p "$fzf_dir" && git clone "$fzf_url" "$fzf_dir"
    fi

    git --git-dir="$fzf_git_dir" --work-tree="$fzf_dir" fetch
    git --git-dir="$fzf_git_dir" --work-tree="$fzf_dir" checkout "$FZF_VERSION"
}

setup-fzf ()
{
    local fzf_dir="$HOME/.fzf"
    local fzf_install="$fzf_dir/install"
    local fzf_install_opts="--bin"

    [[ -f $fzf_install ]] || exit

    $fzf_install "$fzf_install_opts"
}

upgrade-pyenv ()
{
    download-pyenv
    setup-pyenv
}

download-pyenv ()
{
    local pyenv_dir="$HOME/.pyenv"

    if [[ -d "$pyenv_dir" ]]; then
        return
    fi

    [[ $(which curl) ]] || (echo "curl not installed" && exit 1)

    local pyenv_install_url="https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer"

    curl -L "$pyenv_install_url" | bash
}


setup-pyenv ()
{
    [[ $(which make) ]] || (echo "make not installed" && exit 1)

    local pyenv_dir="$HOME/.pyenv"

    cd $pyenv_dir && src/configure && make -C src

    [[ $(which pyenv) ]] || (echo "reload shell to enable pyenv" && exit 1)

    pyenv doctor
    pyenv update
}

upgrade-uv ()
{
    download-uv
    setup-uv
}

download-uv ()
{
    local uv_bin="$HOME/.local/bin/uv"

    if [[ -f "$uv_bin" ]]; then
        return
    fi

    [[ $(which curl) ]] || (echo "curl not installed" && exit 1)

    local uv_install_url="https://astral.sh/uv/install.sh"

    curl -LsSf "$uv_install_url" | env INSTALLER_NO_MODIFY_PATH=1 sh
}

setup-uv ()
{
    local uv_bin="$HOME/.local/bin/uv"

    if [[ ! -f "$uv_bin" ]]; then
        echo "uv not installed"
        return
    fi

    $uv_bin self update

    local completions_dir="$HOME/.config/bashrc.d/completions"

    if [[ -d "$completions_dir" ]]; then
        uv generate-shell-completion bash > "$completions_dir/uv.sh"
        uvx --generate-shell-completion bash > "$completions_dir/uvx.sh"
    fi
}

main ()
{
    while getopts ":afpu" flag; do
        case "${flag}" in
            a)
                upgrade-fzf
                upgrade-pyenv
                upgrade-uv
                exit 0;;
            f)
                upgrade-fzf
                exit 0;;
            p)
                upgrade-pyenv
                exit 0;;
            u)
                upgrade-uv
                exit 0;;
        esac
    done

    echo "Usage: $0 [-a][-f][-p][-u]"
}

main $@
