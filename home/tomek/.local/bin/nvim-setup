#!/usr/bin/env bash
set -e

nvim-bin ()
{
    local nvim=$(which nvim)
    echo "${nvim:-"$HOME/.local/bin/nvim"}"
}

upgrade-nvim ()
{
    [[ $(which curl) ]] || (echo "curl not installed" && exit 1)

    echo "Downloading latest nvim appimage"

    local curl=$(which curl)
    local grep=$(which grep)
    local sed=$(which sed)
    local head=$(which head)

    echo "Fetching appimage download url"
    local appimage_url=$(
        $curl -s -o- https://api.github.com/repos/neovim/neovim/releases/latest \
            | $grep "browser_download_url.*.appimage" \
            | $head -n 1 \
            | $sed -e "s/^.*\(http.*appimage\).*$/\1/"
    )

    if [[ -n $appimage_url ]]; then
        local mkdir=$(which mkdir)
        local chmod=$(which chmod)

        local bin_path="$HOME/.local/bin"
        local nvim_path="$bin_path/nvim"

        $mkdir -p "$bin_path" &&\
            $curl -# -L "$appimage_url" -o "$nvim_path" &&\
            $chmod u+x "$nvim_path"
    else
        echo "AppImage download url not found"
    fi
}

sync-nvim-plugins ()
{
    echo "Synchronizing plugins"

    download-plugin-manager
    sync-plugins
    sync-treesitter-parsers
}

download-plugin-manager ()
{
    [[ $(which git) ]] || (echo "git not installed" && exit 1)

    local git=$(which git)
    local mkdir=$(which mkdir)
    local plugin_manager_url="https://github.com/wbthomason/packer.nvim"
    local nvim_plugin_dir="$HOME/.local/share/nvim/site/pack/packer/start"
    local plugin_manager="$nvim_plugin_dir/packer.nvim"

    [[ -e "$plugin_manager" ]] && return

    $mkdir -p "$nvim_plugin_dir" && $git clone --depth 1 "$plugin_manager_url" "$plugin_manager"
}


sync-plugins ()
{
    local plugins="$HOME/.config/nvim/lua/plugin/init.lua"
    [[ -f $plugins ]] || exit 1

    local compiled_plugins="$HOME/.config/nvim/plugin/packer_compiled.lua"
    [[ -f $compiled_plugins ]] && rm $compiled_plugins

    local nvim=$(nvim-bin)
    local quit_after_sync="autocmd User PackerComplete quitall"
    local sync_cmd="PackerSync"

    $nvim -u "$plugins" -c "$quit_after_sync" -c "$sync_cmd" SYNC
}


sync-treesitter-parsers ()
{
    local treesitter="$HOME/.config/nvim/lua/plugin/nvim-treesitter.lua"
    [[ -f $treesitter ]] || exit 1

    local nvim=$(nvim-bin)
    $nvim --headless -c "TSUpdateSync" -c "quit"
}


update-python-requirements ()
{
    local pyenv=$(which pyenv)
    [[ -z "$pyenv" ]] && echo "pyenv not installed" && exit 1

    local venv_path=$(pyenv prefix nvim)
    [[ -z "$venv_path" ]] && exit 1

    local python_cmd="$venv_path/bin/python"
    local requirements="$HOME/.config/nvim/requirements.txt"
    if [[ -f "$python_cmd" && -f "$requirements" ]]; then
        echo "Updating python requirements"
        $python_cmd -mpip install -U setuptools pip wheel
        $python_cmd -mpip install -U -r "$requirements"
    else
        echo "Python requirements not updated"
    fi
}

main ()
{
    while getopts "up" flag; do
        case "${flag}" in
            u)
                upgrade-nvim
                echo;;
            p)
                update-python-requirements
                echo;;
        esac
    done

    sync-nvim-plugins
    echo
}

main $@
